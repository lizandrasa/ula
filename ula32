module ula_32(input logic [31:0] a,b,
	      input logic [1:0] ALUControl,
	      output logic [31:0] Result,
	      output logic [3:0] ALUFlags);

logic		neg, zero, carry, overflow;
logic [31:0] condinvb;
logic [32:0] sum;

assign condinvb = ALUControl[0] ? ~b:b; //Se bit 2 de ALUControl for 1, recebe naoB
assign sum = a + condinvb + ALUControl[0]; // Caso ALUControl for 1 e feito complemento de 2 e efetuada subtracao. Contrario, soma.

always_comb
	casex (ALUControl[1:0])
		2'b0?: Result = sum; // Ultimo bit de ALUControl define soma ou subtracao.
		2'b10: Result = a & b; // Condicao de AND 
		2'b11: Result = a | b; // Condicao de OR
	endcase

assign neg	= Result[31]; //Flag Negative
assign zero     = (Result == 32'b0); // Flag Zero. Se condição verdadeira, Z=1;
assign carry    = (ALUControl[1] == 1'b0) & sum[32]; // Flag Carry. 
assign overflow = (ALUControl[1] == 1'b0) &
		  ~(a[31] ^ b[31] ^ ALUControl[0]) &
		  (a[31] ^ sum[31]); //Flag overflow	

assign ALUFlags	   = {neg, zero, carry, overflow}; 

endmodule 
